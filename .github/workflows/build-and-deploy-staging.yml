name: GitHub Actions Demo
on: 
  push:
    branches:
    - feature/*
jobs:
  build_ios:
    name: build and deploy
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-java@v1
      with:
        java-version: '12.x'
    - uses: subosito/flutter-action@v1
      with:
        flutter-version: '2.5.1'
    - name: Install the Apple certificate and provisioning profile
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.CERTIFICATES_DISTRIBUTION }}
        P12_PASSWORD: ${{ secrets.PWD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_AD_HOC }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
    - run: flutter pub get
    - run: flutter test
    - run: ls
    - name: print directory
      run: |
        for entry in "ios"/*
        do
          echo "$entry"
        done
    - run: flutter build ipa --release --export-options-plist=ios/exportOptions.plist
    - name: Upload iPA
      uses: actions/upload-artifact@master
      with:
        name: ios-build
        path: build/ios/archive
  beta_ios:
    name: Upload iOS Beta to Firebase App Distribution
    needs: [build_ios]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Download Artifact
      uses: actions/download-artifact@master
      with:
        name: ios-build
        path: build/ios/archive
    - name: print list
      run: ls
    - name: print current dir
      run: echo $PWD
    - name: check file exists
      run: |
        FILE=build/ios/iphoneos/
        if [ -d "$FILE" ]; then
          echo "$FILE exists."
        else 
          echo "$FILE does not exist."
        fi
    - name: print directory
      run: |
        for entry in "build/ios/archive"/*
        do
          echo "$entry"
        done
    - name: Upload IPA
      uses: wzieba/Firebase-Distribution-Github-Action@v1.0.0
      with:
        appId: ${{secrets.FIREBASE_IOS_APPID}}
        token: ${{secrets.FIREBASE_TOKEN}}
        groups: testers
        file: build/ios/archive/Runner.ipa
