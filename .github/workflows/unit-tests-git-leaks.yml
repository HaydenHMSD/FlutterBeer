name: Unit Tests and Git Leaks
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: feature/*

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
jobs:
  makedirs:
    runs-on: macos-latest
    steps:
    - name: Install the Apple certificate and provisioning profile
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.CERTIFICATES_DISTRIBUTION }}
        P12_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.STAGING_PROVISIONING_PROFILE_AD_HOC }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        FB_INFO: ${{ secrets.STAGING_FIREBASE_INFO }}
      run: |
        #create variables
        DIRECTORY=ios/Resources/FirebaseConfigs/Staging
        PLIST_FILE=ios/Resources/FirebaseConfigs/Staging/GoogleService-Info.plist
        
        #make directory
        mkdir -p $DIRECTORY
        
        #decode
        echo -n "$FB_INFO" | base64 --decode --output $PLIST_FILE
    - run: ls
    - run: |
        for entry in "ios"/*
        do
          echo "$entry"
        done
    - run: |
        PLIST_FILE=ios/Resources/FirebaseConfigs/Staging/GoogleService-Info.plist
        if test -f "$PLIST_FILE"; then
          echo "$PLIST_FILE exists."
        fi
    - name: Install the Apple certificate and provisioning profile
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.CERTIFICATES_DISTRIBUTION }}
        P12_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.STAGING_PROVISIONING_PROFILE_AD_HOC }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        FB_INFO: ${{ secrets.STAGING_FIREBASE_INFO }}
      
      run: |
        # create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        # import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        # import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH
        # apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
    - name: print directory
      run: |
        for entry in "~/Library/MobileDevice/Provisioning\ Profiles"/*
        do
          echo "$entry"
        done  
    - run: |
        cd ~/Library/MobileDevice/Provisioning\ Profiles
        ls
#   gitleaks:
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v1
#     - name: gitleaks-action
#       uses: zricethezav/gitleaks-action@master
#     - uses: actions/checkout@v2
#     - uses: actions/setup-java@v1
#       with:
#         java-version: '12.x'
#     - name: Cache Flutter dependencies
#       uses: actions/cache@v1
#       with:
#         path: /opt/hostedtoolcache/flutter
#         key: ${{ runner.OS }}-flutter-install-cache-${{ env.flutter_version }}
#     - uses: subosito/flutter-action@v1
#       with:
#         flutter-version: ${{ env.flutter_version }}
#     - run: flutter pub get
#     - run: flutter test

